// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pb.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pb_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pb_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pb_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pb_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pb_2eproto;
class A;
struct ADefaultTypeInternal;
extern ADefaultTypeInternal _A_default_instance_;
class Status;
struct StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::A* Arena::CreateMaybeMessage<::A>(Arena*);
template<> ::Status* Arena::CreateMaybeMessage<::Status>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Status final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  ~Status() override;
  explicit constexpr Status(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Status& default_instance() {
    return *internal_default_instance();
  }
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Status& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Status& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
    kCreateTimeFieldNumber = 2,
  };
  // string Path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string CreateTime = 2;
  void clear_createtime();
  const std::string& createtime() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_createtime(ArgT0&& arg0, ArgT... args);
  std::string* mutable_createtime();
  PROTOBUF_NODISCARD std::string* release_createtime();
  void set_allocated_createtime(std::string* createtime);
  private:
  const std::string& _internal_createtime() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_createtime(const std::string& value);
  std::string* _internal_mutable_createtime();
  public:

  // @@protoc_insertion_point(class_scope:Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2eproto;
};
// -------------------------------------------------------------------

class A final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:A) */ {
 public:
  inline A() : A(nullptr) {}
  ~A() override;
  explicit constexpr A(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  A(const A& from);
  A(A&& from) noexcept
    : A() {
    *this = ::std::move(from);
  }

  inline A& operator=(const A& from) {
    CopyFrom(from);
    return *this;
  }
  inline A& operator=(A&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const A& default_instance() {
    return *internal_default_instance();
  }
  static inline const A* internal_default_instance() {
    return reinterpret_cast<const A*>(
               &_A_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(A& a, A& b) {
    a.Swap(&b);
  }
  inline void Swap(A* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(A* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  A* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<A>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const A& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const A& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(A* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "A";
  }
  protected:
  explicit A(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBFieldNumber = 1,
    kCFieldNumber = 2,
    kDFieldNumber = 3,
    kEFieldNumber = 4,
  };
  // repeated .Status B = 1;
  int b_size() const;
  private:
  int _internal_b_size() const;
  public:
  void clear_b();
  ::Status* mutable_b(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Status >*
      mutable_b();
  private:
  const ::Status& _internal_b(int index) const;
  ::Status* _internal_add_b();
  public:
  const ::Status& b(int index) const;
  ::Status* add_b();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Status >&
      b() const;

  // repeated .Status C = 2;
  int c_size() const;
  private:
  int _internal_c_size() const;
  public:
  void clear_c();
  ::Status* mutable_c(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Status >*
      mutable_c();
  private:
  const ::Status& _internal_c(int index) const;
  ::Status* _internal_add_c();
  public:
  const ::Status& c(int index) const;
  ::Status* add_c();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Status >&
      c() const;

  // repeated .Status D = 3;
  int d_size() const;
  private:
  int _internal_d_size() const;
  public:
  void clear_d();
  ::Status* mutable_d(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Status >*
      mutable_d();
  private:
  const ::Status& _internal_d(int index) const;
  ::Status* _internal_add_d();
  public:
  const ::Status& d(int index) const;
  ::Status* add_d();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Status >&
      d() const;

  // repeated .Status E = 4;
  int e_size() const;
  private:
  int _internal_e_size() const;
  public:
  void clear_e();
  ::Status* mutable_e(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Status >*
      mutable_e();
  private:
  const ::Status& _internal_e(int index) const;
  ::Status* _internal_add_e();
  public:
  const ::Status& e(int index) const;
  ::Status* add_e();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Status >&
      e() const;

  // @@protoc_insertion_point(class_scope:A)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Status > b_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Status > c_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Status > d_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Status > e_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pb_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Status

// string Path = 1;
inline void Status::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& Status::path() const {
  // @@protoc_insertion_point(field_get:Status.Path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Status::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Status.Path)
}
inline std::string* Status::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:Status.Path)
  return _s;
}
inline const std::string& Status::_internal_path() const {
  return path_.Get();
}
inline void Status::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Status::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Status::release_path() {
  // @@protoc_insertion_point(field_release:Status.Path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Status::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Status.Path)
}

// string CreateTime = 2;
inline void Status::clear_createtime() {
  createtime_.ClearToEmpty();
}
inline const std::string& Status::createtime() const {
  // @@protoc_insertion_point(field_get:Status.CreateTime)
  return _internal_createtime();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Status::set_createtime(ArgT0&& arg0, ArgT... args) {
 
 createtime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Status.CreateTime)
}
inline std::string* Status::mutable_createtime() {
  std::string* _s = _internal_mutable_createtime();
  // @@protoc_insertion_point(field_mutable:Status.CreateTime)
  return _s;
}
inline const std::string& Status::_internal_createtime() const {
  return createtime_.Get();
}
inline void Status::_internal_set_createtime(const std::string& value) {
  
  createtime_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Status::_internal_mutable_createtime() {
  
  return createtime_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Status::release_createtime() {
  // @@protoc_insertion_point(field_release:Status.CreateTime)
  return createtime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Status::set_allocated_createtime(std::string* createtime) {
  if (createtime != nullptr) {
    
  } else {
    
  }
  createtime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), createtime,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (createtime_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    createtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Status.CreateTime)
}

// -------------------------------------------------------------------

// A

// repeated .Status B = 1;
inline int A::_internal_b_size() const {
  return b_.size();
}
inline int A::b_size() const {
  return _internal_b_size();
}
inline void A::clear_b() {
  b_.Clear();
}
inline ::Status* A::mutable_b(int index) {
  // @@protoc_insertion_point(field_mutable:A.B)
  return b_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Status >*
A::mutable_b() {
  // @@protoc_insertion_point(field_mutable_list:A.B)
  return &b_;
}
inline const ::Status& A::_internal_b(int index) const {
  return b_.Get(index);
}
inline const ::Status& A::b(int index) const {
  // @@protoc_insertion_point(field_get:A.B)
  return _internal_b(index);
}
inline ::Status* A::_internal_add_b() {
  return b_.Add();
}
inline ::Status* A::add_b() {
  ::Status* _add = _internal_add_b();
  // @@protoc_insertion_point(field_add:A.B)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Status >&
A::b() const {
  // @@protoc_insertion_point(field_list:A.B)
  return b_;
}

// repeated .Status C = 2;
inline int A::_internal_c_size() const {
  return c_.size();
}
inline int A::c_size() const {
  return _internal_c_size();
}
inline void A::clear_c() {
  c_.Clear();
}
inline ::Status* A::mutable_c(int index) {
  // @@protoc_insertion_point(field_mutable:A.C)
  return c_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Status >*
A::mutable_c() {
  // @@protoc_insertion_point(field_mutable_list:A.C)
  return &c_;
}
inline const ::Status& A::_internal_c(int index) const {
  return c_.Get(index);
}
inline const ::Status& A::c(int index) const {
  // @@protoc_insertion_point(field_get:A.C)
  return _internal_c(index);
}
inline ::Status* A::_internal_add_c() {
  return c_.Add();
}
inline ::Status* A::add_c() {
  ::Status* _add = _internal_add_c();
  // @@protoc_insertion_point(field_add:A.C)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Status >&
A::c() const {
  // @@protoc_insertion_point(field_list:A.C)
  return c_;
}

// repeated .Status D = 3;
inline int A::_internal_d_size() const {
  return d_.size();
}
inline int A::d_size() const {
  return _internal_d_size();
}
inline void A::clear_d() {
  d_.Clear();
}
inline ::Status* A::mutable_d(int index) {
  // @@protoc_insertion_point(field_mutable:A.D)
  return d_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Status >*
A::mutable_d() {
  // @@protoc_insertion_point(field_mutable_list:A.D)
  return &d_;
}
inline const ::Status& A::_internal_d(int index) const {
  return d_.Get(index);
}
inline const ::Status& A::d(int index) const {
  // @@protoc_insertion_point(field_get:A.D)
  return _internal_d(index);
}
inline ::Status* A::_internal_add_d() {
  return d_.Add();
}
inline ::Status* A::add_d() {
  ::Status* _add = _internal_add_d();
  // @@protoc_insertion_point(field_add:A.D)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Status >&
A::d() const {
  // @@protoc_insertion_point(field_list:A.D)
  return d_;
}

// repeated .Status E = 4;
inline int A::_internal_e_size() const {
  return e_.size();
}
inline int A::e_size() const {
  return _internal_e_size();
}
inline void A::clear_e() {
  e_.Clear();
}
inline ::Status* A::mutable_e(int index) {
  // @@protoc_insertion_point(field_mutable:A.E)
  return e_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Status >*
A::mutable_e() {
  // @@protoc_insertion_point(field_mutable_list:A.E)
  return &e_;
}
inline const ::Status& A::_internal_e(int index) const {
  return e_.Get(index);
}
inline const ::Status& A::e(int index) const {
  // @@protoc_insertion_point(field_get:A.E)
  return _internal_e(index);
}
inline ::Status* A::_internal_add_e() {
  return e_.Add();
}
inline ::Status* A::add_e() {
  ::Status* _add = _internal_add_e();
  // @@protoc_insertion_point(field_add:A.E)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Status >&
A::e() const {
  // @@protoc_insertion_point(field_list:A.E)
  return e_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pb_2eproto
